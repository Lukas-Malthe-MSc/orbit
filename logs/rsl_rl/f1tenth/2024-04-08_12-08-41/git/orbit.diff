--- git status ---
On branch f1tenth-environment
Your branch is up to date with 'origin/f1tenth-environment'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	logs/rsl_rl/f1tenth/2024-04-08_11-42-40/
	logs/rsl_rl/f1tenth/2024-04-08_12-08-41/

no changes added to commit (use "git add" and/or "git commit -a") 


--- git diff ---
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
index 2f0166f..311a802 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
@@ -136,12 +136,12 @@ class ObservationsCfg:
         base_lin_vel = ObsTerm(func=mdp.base_lin_vel, noise=Unoise(n_min=-0.1, n_max=0.1))
         base_ang_vel = ObsTerm(func=mdp.base_ang_vel, noise=Unoise(n_min=-0.1, n_max=0.1))
         
-        lidar_ranges = ObsTerm(func=mdp.lidar_ranges, params={"sensor_cfg": SceneEntityCfg("lidar")})
+        lidar_ranges = ObsTerm(func=mdp.lidar_ranges, noise=Unoise(n_min=-0.1, n_max=0.1), params={"sensor_cfg": SceneEntityCfg("lidar")})
         
         last_actions = ObsTerm(func=mdp.last_action)
 
         def __post_init__(self) -> None:
-            self.enable_corruption = False
+            self.enable_corruption = True
             self.concatenate_terms = True
 
     # observation groups
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
index 92d5212..74e1bcd 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
@@ -70,4 +70,24 @@ def move_to_position(env: RLTaskEnv, target: torch.Tensor, asset_cfg: SceneEntit
     # extract the used quantities (to enable type-hinting)
     asset: Articulation = env.scene[asset_cfg.name]
     # compute the reward
-    return torch.sqrt(torch.sum(torch.square(asset.data.root_pos_w[:, :2] - target), dim=1))
\ No newline at end of file
+    return torch.sqrt(torch.sum(torch.square(asset.data.root_pos_w[:, :2] - target), dim=1))
+
+def passed_starting_location(env: RLTaskEnv, asset_cfg: SceneEntityCfg, threshold: float) -> torch.Tensor:
+    """Checks if assets have passed their starting locations within some threshold."""
+    # Access the asset
+    asset: Articulation = env.scene[asset_cfg.name]
+    
+    # Create starting positions empty tensor
+    starting_positions = torch.zeros((asset.data.root_pos_w.shape[0], 2), device=asset.device)
+    
+    # If starting positions are all zeros initialize the actual starting positions
+    if torch.all(starting_positions == 0):
+        starting_positions = asset.data.root_pos_w[:, :2]  # Placeholder for actual access method
+    
+    # Compute the difference in positions
+    position_differences = asset.data.root_pos_w[:, :2] - starting_positions
+    
+    # Check if the assets have moved beyond the threshold from their starting positions
+    passed_threshold = torch.abs(position_differences) > threshold
+    
+    return passed_threshold
\ No newline at end of file