--- git status ---
HEAD detached from ac6b6f4
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   source/extensions/omni.isaac.orbit/omni/isaac/orbit/envs/mdp/actions/ackermann_actions.py
	modified:   source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar.py
	modified:   source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar_cfg.py
	modified:   source/extensions/omni.isaac.orbit_assets/omni/isaac/orbit_assets/f1tenth.py
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/agents/rsl_rl_ppo_cfg.py
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/randomizations.py
	modified:   source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	logs/rsl_rl/f1tenth/2024-04-08_15-39-08/exported/
	logs/rsl_rl/f1tenth/2024-04-09_08-18-16/
	logs/rsl_rl/f1tenth/2024-04-09_08-19-42/
	logs/rsl_rl/f1tenth/2024-04-09_08-20-29/
	logs/rsl_rl/f1tenth/2024-04-09_08-32-14/
	logs/rsl_rl/f1tenth/2024-04-09_08-50-12/
	logs/rsl_rl/f1tenth/2024-04-09_11-29-02/
	logs/rsl_rl/f1tenth/2024-04-09_11-29-54/
	logs/rsl_rl/f1tenth/2024-04-09_17-36-08/
	logs/rsl_rl/f1tenth/2024-04-09_17-38-15/
	logs/rsl_rl/f1tenth/2024-04-10_08-23-33/
	logs/rsl_rl/f1tenth/2024-04-10_08-24-19/
	logs/rsl_rl/f1tenth/2024-04-10_09-12-30/

no changes added to commit (use "git add" and/or "git commit -a") 


--- git diff ---
diff --git a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/envs/mdp/actions/ackermann_actions.py b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/envs/mdp/actions/ackermann_actions.py
index 5056c9b..846da6e 100644
--- a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/envs/mdp/actions/ackermann_actions.py
+++ b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/envs/mdp/actions/ackermann_actions.py
@@ -108,14 +108,16 @@ class AckermannAction(ActionTerm):
         # store the raw actions
         # actions[:, 0] = torch.clamp(actions[:, 0], min=2., max=2.)
         # actions[:, 1] = torch.clamp(actions[:, 1], min=0.1, max=0.1)
-        
+        # print(f"Applying actions: {actions}")
         self._raw_actions[:] = actions
         
         self._processed_actions = self.raw_actions * self._scale + self._offset
         self._processed_actions[:, 0] = torch.clamp(self._processed_actions[:, 0], min=-self.max_speed, max=self.max_speed)
         self._processed_actions[:, 1] = torch.clamp(self._processed_actions[:, 1], min=-self.max_steering_angle, max=self.max_steering_angle)
+        # print(f"Processed actions: {self._processed_actions}")
 
     def apply_actions(self):
+        
 
         left_rotator_angle, right_rotator_angle, wheel_speeds = self. calculate_ackermann_angles_and_velocities(
             target_velocity=self.processed_actions[:, 0],  # Velocity for all cars
@@ -140,6 +142,7 @@ class AckermannAction(ActionTerm):
         target_steering_angle_rad = target_steering_angle_rad.float()
         target_velocity = target_velocity.float()
         
+        
         # Calculating the turn radius from the steering angle
         tan_steering = torch.tan(target_steering_angle_rad)
         R = torch.where(tan_steering == 0, torch.full_like(tan_steering, 1e6), L / tan_steering)
@@ -156,10 +159,56 @@ class AckermannAction(ActionTerm):
         v_front_left = target_velocity * (R - W/2) / R
         v_front_right = target_velocity * (R + W/2) / R
         
-        v_back_left = target_velocity * R_rear_left / R
-        v_back_right = target_velocity * R_rear_right / R
+        v_back_left = target_velocity * R_rear_left / torch.abs(R)
+        v_back_right = target_velocity * R_rear_right / torch.abs(R)
         
         # Calculate target rotation for each wheel based on its velocity
-        wheel_speeds = torch.stack([v_front_left, v_front_right, v_back_left, v_back_right], dim=1) / wheel_radius
+        wheel_speeds = torch.stack([v_back_left, v_back_right, v_front_left, v_front_right], dim=1) / wheel_radius
         
         return delta_left, delta_right, wheel_speeds
+    
+#     def calculate_ackermann_angles_and_velocities(self, target_steering_angle_rad, target_velocity):
+        
+        
+# #           B
+# #           |\
+# #           | \
+# #           |  \
+# #          a|   \c
+# #           |    \
+# #           |     \
+# #           |______\
+# #           C   b   A
+# #
+# #           Tan(B)=b/a   <--->  b=a*Tan(B)
+# # In our case we know C=90, a = base_length and B = 90-steering_angle
+
+#         R_nutnut = self.base_length * torch.tan(abs((0.5*torch.pi)-target_steering_angle_rad))
+
+    
+#         inner_diff = torch.atan(self.base_length / (R - self.base_width / 2))
+#         outer_diff = torch.atan(self.base_length / (R + self.base_width / 2))
+        
+        
+        
+        
+        
+        
+        
+        
+#         # If target steering is positive, we turn right
+#         if target_steering_angle_rad > 0:
+#             left_rotator_angle = outer_diff
+#             right_rotator_angle = inner_diff
+            
+#             left_front_radius = 0
+#             right_front_radius = 0
+#             left_back_radius = 0
+#             right_back_radius = 0
+            
+            
+
+        
+        
+        
+
diff --git a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar.py b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar.py
index 241dae6..b6b5a9b 100644
--- a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar.py
+++ b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar.py
@@ -173,6 +173,13 @@ class Lidar(SensorBase):
             
             if self.cfg.vertical_resolution is not None:
                 lidar.GetVerticalResolutionAttr().Set(self.cfg.vertical_resolution)
+                
+            if self.cfg.draw_lines is not None:
+                lidar.GetDrawLinesAttr().Set(self.cfg.draw_lines)
+                
+            if self.cfg.draw_points is not None:
+                lidar.GetDrawPointsAttr().Set(self.cfg.draw_points)
+                
 
             # Additional LiDAR-specific properties can be set here as needed.
 
diff --git a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar_cfg.py b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar_cfg.py
index a7a8c23..ccd0e52 100644
--- a/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar_cfg.py
+++ b/source/extensions/omni.isaac.orbit/omni/isaac/orbit/sensors/lidar/lidar_cfg.py
@@ -67,3 +67,9 @@ class LidarCfg(SensorBaseCfg):
     
     vertical_resolution: None | float = None
     """The vertical resolution of the lidar. Defaults to None."""
+
+    draw_lines: None | bool = False
+    """Whether to draw lines to visualize the lidar rays. Defaults to False."""
+    
+    draw_points: None | bool = False
+    """Whether to draw points to visualize the lidar rays. Defaults to False."""
\ No newline at end of file
diff --git a/source/extensions/omni.isaac.orbit_assets/omni/isaac/orbit_assets/f1tenth.py b/source/extensions/omni.isaac.orbit_assets/omni/isaac/orbit_assets/f1tenth.py
index 5a388b1..ff8e2c2 100644
--- a/source/extensions/omni.isaac.orbit_assets/omni/isaac/orbit_assets/f1tenth.py
+++ b/source/extensions/omni.isaac.orbit_assets/omni/isaac/orbit_assets/f1tenth.py
@@ -16,12 +16,13 @@ from pathlib import Path
 
 current_working_directory = Path.cwd()
 
-# F1TNEHT_PROJET_DIR = "omniverse://localhost/Projects/f1tenth"
-F1TENTH_PROJECT_DIR = current_working_directory
+F1TENTH_PROJECT_DIR = "omniverse://localhost/Projects/f1tenth"
+# F1TENTH_PROJECT_DIR = current_working_directory
 
 F1TENTH_CFG = ArticulationCfg(
     spawn=sim_utils.UsdFileCfg(
-        usd_path=f"{F1TENTH_PROJECT_DIR}/f1tenth_assets/omniverse/robot/instanceable/f1tenth.usd",
+        # usd_path=f"{F1TENTH_PROJECT_DIR}/f1tenth_assets/omniverse/robot/instanceable/f1tenth.usd",
+        usd_path=f"{F1TENTH_PROJECT_DIR}/robot/instanceable/f1tenth.usd",
     ),
     init_state=ArticulationCfg.InitialStateCfg(
         pos=(0.0, 0.0, 0.5)
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/agents/rsl_rl_ppo_cfg.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/agents/rsl_rl_ppo_cfg.py
index 531bd0e..e041f81 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/agents/rsl_rl_ppo_cfg.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/agents/rsl_rl_ppo_cfg.py
@@ -20,8 +20,8 @@ from omni.isaac.orbit_tasks.utils.wrappers.rsl_rl import (
 @configclass
 class F1tenthPPORunnerCfg(RslRlOnPolicyRunnerCfg):
     num_steps_per_env = 24
-    max_iterations = 1000
-    save_interval = 100
+    max_iterations = 2000
+    save_interval = 50
     experiment_name = "f1tenth"
     empirical_normalization = False
     device = "cuda:0"
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
index e703279..15987ec 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/f1tenth_env_cfg.py
@@ -41,7 +41,7 @@ Train commmand:
 $ ./orbit.sh -p source/standalone/workflows/rsl_rl/train.py --task F1tenth-v0 --headless --offscreen_render --num_envs 4096
 
 Play command:
-$ ./orbit.sh -p source/standalone/workflows/rsl_rl/play.py --task F1tenth-v0 --num_envs 4 --load_run 2024-04-05_12-34-44 --checkpoint model_49.pt
+$ ./orbit.sh -p source/standalone/workflows/rsl_rl/play.py --task F1tenth-v0 --num_envs 4 --load_run 2024-04-10_08-24-19 --checkpoint model_200.pt
 
 """
 @configclass
@@ -51,7 +51,9 @@ class F1tenthSceneCfg(InteractiveSceneCfg):
     # ground plane
     ground = AssetBaseCfg(
         prim_path="/World/ground",
-        spawn=sim_utils.GroundPlaneCfg(size=(100.0, 100.0)),
+        spawn=sim_utils.GroundPlaneCfg(size=(100.0, 100.0),
+                                       color=(0.5, 0.5, 0.5)),
+        
     )
     # lights
     dome_light = AssetBaseCfg(
@@ -65,11 +67,19 @@ class F1tenthSceneCfg(InteractiveSceneCfg):
     )
     
     
-    target = AssetBaseCfg(
-        prim_path="/World/target",
-        spawn=sim_utils.SphereCfg(radius=0.1),
-        init_state=AssetBaseCfg.InitialStateCfg(pos=(5.0, 4.0, 0.0),rot=(0.0, 0.0, 0.0, 0.0)),
-    )
+    # target = AssetBaseCfg(
+    #     prim_path="{ENV_REGEX_NS}/target",
+    #     spawn=sim_utils.SphereCfg(radius=0.1),
+    #     init_state=AssetBaseCfg.InitialStateCfg(pos=(5.0, 4.0, 0.0),rot=(0.0, 0.0, 0.0, 0.0)),
+    # )
+
+    # target = AssetBaseCfg(
+    #     prim_path="{ENV_REGEX_NS}/target",
+    #     spawn=sim_utils.CuboidCfg(size=(0.1, 2.0, 0.1)),
+    #     init_state=AssetBaseCfg.InitialStateCfg(pos=(0.0, 0.0, 0.0),
+    #                                             rot=(0.0, 0.0, 0.0, 0.0)),
+    # )
+    
     
     # f1tenth
     robot: ArticulationCfg = F1TENTH_CFG.replace(prim_path="{ENV_REGEX_NS}/f1tenth")
@@ -89,7 +99,9 @@ class F1tenthSceneCfg(InteractiveSceneCfg):
             pos=(0.11749, 0.0, 0.1),  # Example position offset from the robot base
             rot=(1.0, 0.0, 0.0, 0.0),  # Example rotation offset; no rotation in this case
             convention="ros"  # Frame convention
-        )
+        ),
+        draw_lines=False,
+        draw_points=False,
     )
     
     race_track = AssetBaseCfg( 
@@ -130,7 +142,7 @@ class ActionsCfg:
     ackermann_action = mdp.AckermannActionCfg(asset_name="robot", 
                                   wheel_joint_names=["wheel_back_left", "wheel_back_right", "wheel_front_left", "wheel_front_right"], 
                                   steering_joint_names=["rotator_left", "rotator_right"], 
-                                  base_width=0.25, base_length=0.35, wheel_radius=0.05, max_speed=4.0, max_steering_angle=math.pi/4, scale=(1.0, 1.0), offset=(0.0, 0.0)) #TODO: adjust max speed
+                                  base_width=0.25, base_length=0.35, wheel_radius=0.05, max_speed=2.0, max_steering_angle=math.pi/4, scale=(1.0, 1.0), offset=(0.0, 0.0)) #TODO: adjust max speed
 
 @configclass
 class ObservationsCfg:
@@ -169,7 +181,7 @@ class RandomizationCfg:
             "asset_cfg": SceneEntityCfg("robot"), 
             "pose_range": {
                 # "x": (-0.3, 0.3),  # X position range from -5 to 5
-                "x": (3.0, 3.5),  # X position range from -5 to 5
+                "x": (0.0, 0.5),  # X position range from -5 to 5
                 "y": (-0.3, 0.3),  # Y position range from -5 to 5
                 "z": (0.0, 0.5),   # Z position range from 0 to 2 (assuming starting on the ground)
                 "roll": (-0.2, 0.2),  # Roll orientation range from -pi to pi
@@ -186,6 +198,7 @@ class RandomizationCfg:
             }     
         },
     )
+    
 
 
 @configclass
@@ -193,14 +206,21 @@ class RewardsCfg:
     """Reward terms for the MDP."""
 
     # (1) Constant running reward
-    alive = RewTerm(func=mdp.is_alive, weight=0.5)
+    # alive = RewTerm(func=mdp.is_alive, weight=0.5)
     # # (2) Failure penalty
-    terminating = RewTerm(func=mdp.is_terminated, weight=-10.0)
+    # terminating = RewTerm(func=mdp.is_terminated, weight=-10.0)
     
     # -- Task: Drive forward
     velocity = RewTerm(func=mdp.forward_velocity, weight=1.0)
     
     # passed_starting_location = RewTerm(func=mdp.passed_starting_location, weight=1.0, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.5})
+    # passed_starting_lcation = RewTerm(func=mdp.touch_target, 
+    #                                   weight=1.0, 
+    #                                   params={"asset_cfg": SceneEntityCfg("robot"), 
+    #                                           "target_cfg": SceneEntityCfg("target"),
+    #                                             "threshold": 0.5
+    #                                           } 
+    #                                   )
     
     # update_pass_counters = RewTerm(func=mdp.update_pass_counters, weight=1.0, params={"asset_cfg": SceneEntityCfg("robot"), "threshold": 0.5})
     
@@ -211,17 +231,17 @@ class RewardsCfg:
     # move_to_position = RewTerm(func=mdp.move_to_position, weight=-1.0, params={"target": (5.0, 4.0), "asset_cfg": SceneEntityCfg("robot")})
     
     # -- Penalty
-    steering_angle_position = RewTerm(
-        func=mdp.joint_pos_target_l2,
-        weight=-0.05,
-        params={"asset_cfg": SceneEntityCfg("robot", joint_names=['rotator_left', 'rotator_right']), "target": 0.0}
-    )
+    # steering_angle_position = RewTerm(
+    #     func=mdp.joint_pos_target_l2,
+    #     weight=-0.05,
+    #     params={"asset_cfg": SceneEntityCfg("robot", joint_names=['rotator_left', 'rotator_right']), "target": 0.0}
+    # )
     
-    # -- Penalty
-    min_lidar_distance = RewTerm(
-        func=mdp.lidar_min_distance,
-        weight=-0.01,
-        params={"sensor_cfg": SceneEntityCfg("lidar")})
+    # # -- Penalty
+    # min_lidar_distance = RewTerm(
+    #     func=mdp.lidar_min_distance,
+    #     weight=-0.01,
+    #     params={"sensor_cfg": SceneEntityCfg("lidar")})
     
 @configclass
 class TerminationsCfg:
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/randomizations.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/randomizations.py
index d68ac53..c0e96ed 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/randomizations.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/randomizations.py
@@ -3,9 +3,30 @@ from __future__ import annotations
 import torch
 from typing import TYPE_CHECKING
 
-from omni.isaac.orbit.assets import Articulation
-from omni.isaac.orbit.managers import SceneEntityCfg
-from omni.isaac.orbit.utils.math import wrap_to_pi
+from omni.isaac.orbit.assets import AssetBaseCfg
 
 if TYPE_CHECKING:
-    from omni.isaac.orbit.envs import RLTaskEnv
\ No newline at end of file
+    from omni.isaac.orbit.envs import RLTaskEnv
+    
+import random
+
+def generate_random_obstacle(prim_path_base, index):
+    # Generate random size
+    size = (random.uniform(0.5, 2.0),  # Width
+            random.uniform(0.5, 2.0),  # Height
+            random.uniform(0.5, 2.0))  # Depth
+    
+    # Generate random position
+    pos = (random.uniform(-5.0, 5.0),  # X
+           random.uniform(-5.0, 5.0),  # Y
+           random.uniform(-5.0, 5.0))  # Z
+    
+    # Keep rotation as it is for simplicity
+    rot = (0.0, 0.0, 0.0, 0.0)
+    
+    # Create and return the obstacle configuration
+    return AssetBaseCfg(
+        prim_path=f"{prim_path_base}/obstacle_{index}",
+        spawn=CuboidCfg(size=size),
+        init_state=AssetBaseCfg.InitialStateCfg(pos=pos, rot=rot),
+    )
\ No newline at end of file
diff --git a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
index d4279a6..70514e0 100644
--- a/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
+++ b/source/extensions/omni.isaac.orbit_tasks/omni/isaac/orbit_tasks/f1tenth/mdp/rewards.py
@@ -36,9 +36,8 @@ def forward_velocity(
     """Root linear velocity in the asset's root frame."""
     # extract the used quantities (to enable type-hinting)
     asset: RigidObject = env.scene[asset_cfg.name]
-    return torch.max(asset.data.root_lin_vel_b[:, 0], torch.zeros(asset.data.root_lin_vel_b[:, 0].shape, device=asset.device))
     # print(f"forward_velocity: {asset.data.root_lin_vel_b[:, 0]}")
-    # return asset.data.root_lin_vel_b[:, 0]
+    return torch.max(asset.data.root_lin_vel_b[:, 0], torch.zeros(asset.data.root_lin_vel_b[:, 0].shape, device=asset.device))
 
 def lidar_distance_sum(env: RLTaskEnv, sensor_cfg: SceneEntityCfg) -> torch.Tensor:
     """Terminate when the asset's joint velocities are outside of the soft joint limits."""
@@ -130,4 +129,22 @@ def update_pass_counters(env: RLTaskEnv, asset_cfg: SceneEntityCfg, threshold: f
     # Save the updated pass counters back to the dictionary
     env.pass_counters[asset_cfg.name] = pass_counters
 
-    return pass_counters
\ No newline at end of file
+    return pass_counters
+
+
+# Reward for touching target
+def touch_target(env: RLTaskEnv, asset_cfg: SceneEntityCfg, target_cfg: SceneEntityCfg, threshold: float) -> torch.Tensor:
+    """Reward for touching the target."""
+    asset: Articulation = env.scene[asset_cfg.name]
+    target: Articulation = env.scene[target_cfg.name]
+    
+    print(f"target_contact: {target.cfg.collision_group}")
+    
+    # Check if there is collision between the asset and the target
+    collision_threshold = asset.data.root_pos_w[:, :2]
+    
+    if collision_threshold:
+        print("THROAT GOAT")
+        return torch.tensor([1.0], device=asset.device)
+    else:
+        return torch.tensor([0.0], device=asset.device)
\ No newline at end of file